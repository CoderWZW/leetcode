# -*- coding: utf-8 -*-
'''
题目： 

我们将整数 x 的 权重 定义为按照下述规则将 x 变成 1 所需要的步数：
如果 x 是偶数，那么 x = x / 2
如果 x 是奇数，那么 x = 3 * x + 1
比方说，x=3的权重为7。因为3需要7步变成1（3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1）。
给你三个整数lo，hi和k 。你的任务是将区间[lo, hi]之间的整数按照它们的权重升序排序 ，如果大于等于2个整数有相同的权重，那么按照数字自身的数值 升序排序 。
请你返回区间 [lo, hi] 之间的整数按权重排序后的第 k 个数。
注意，题目保证对于任意整数 x （lo <= x <= hi） ，它变成 1 所需要的步数是一个 32 位有符号整数。

输入：lo = 12, hi = 15, k = 2
输出：13
解释：12 的权重为 9（12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1）
13 的权重为 9
14 的权重为 17
15 的权重为 17
区间内的数按权重排序以后的结果为 [12,13,14,15] 。对于 k = 2 ，答案是第二个整数也就是 13 。
注意，12 和 13 有相同的权重，所以我们按照它们本身升序排序。14 和 15 同理。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sort-integers-by-the-power-value
'''

class Solution:
    def getKth(self, lo: int, hi: int, k: int) -> int:
        weight_list = {}
        for i in range(lo, hi+1):
            weight = 0
            temp = i
            while(i!=1):
                if i%2==0:
                    i = i/2
                    weight += 1
                else:
                    i = 3*i+1
                    weight +=1
            weight_list[temp] = weight
        weight_list = sorted(weight_list.items(),key = lambda x: (x[1],x[0]))
        return weight_list[k-1][0]
