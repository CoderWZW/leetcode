# -*- coding: utf-8 -*-
'''
题目： 

在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

输入: 4->2->1->3
输出: 1->2->3->4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sort-list/
'''

'''
思路：通过递归实现链表归并排序
· 分割cut环节： 找到当前链表中点，并从中点将链表断开（以便在下次递归cut时，链表片段拥有正确边界）
· 合并merge环节： 将两个排序链表合并，转化为一个排序链表。
'''

# # Definition for singly-linked list.
# # class ListNode:
# #     def __init__(self, val=0, next=None):
# #         self.val = val
# #         self.next = next

# class Solution:
#     def sortList(self, head: ListNode) -> ListNode:
#         if not head or not head.next: 
#         	return head # termination.
#         # cut the LinkedList at the mid index.
#         slow, fast = head, head.next
#         while fast and fast.next:
#             fast, slow = fast.next.next, slow.next
#         mid, slow.next = slow.next, None # save and cut.
#         # recursive for cutting.
#         left, right = self.sortList(head), self.sortList(mid)
#         # merge `left` and `right` linked list and return it.
#         h = res = ListNode(0)
#         while left and right:
#             if left.val < right.val: 
#             	h.next, left = left, left.next
#             else: 
#             	h.next, right = right, right.next
#             h = h.next
#         h.next = left if left else right
#         return res.next
            

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        # 遍历链表，将所有节点放到列表中，按节点值排序后，链接各节点即可
        # 异常考虑，入参为空
        if not head:
            return head

        # 遍历链表
        nodes = list()
        while head:
            nodes.append(head)
            head = head.next 
        # 按节点值排序
        sorted_nodes = sorted(nodes, key=lambda n:n.val)
        # 链接各节点
        new_head = sorted_nodes.pop(0)
        pre = new_head
        for cur in sorted_nodes:
            pre.next = cur
            pre = cur
        pre.next = None
        return new_head
