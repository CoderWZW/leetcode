# -*- coding: utf-8 -*-
'''
题目：1029. 两地调度
公司计划面试 2N 人。第 i 人飞往 A 市的费用为 costs[i][0]，飞往 B 市的费用为 costs[i][1]。
返回将每个人都飞到某座城市的最低费用，要求每个城市都有 N 人抵达

例如：
输入：[[10,20],[30,200],[400,50],[30,20]]
输出：110
解释：
第一个人去 A 市，费用为 10。
第二个人去 A 市，费用为 30。
第三个人去 B 市，费用为 50。
第四个人去 B 市，费用为 20。

最低总费用为 10 + 30 + 50 + 20 = 110，每个城市都有一半的人在面试。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-city-scheduling
'''

'''
思路： 选出 price_A - price_B 最小的 N 个人，让他们飞往 A 市，其余人飞往 B 市。
·按照 price_A - price_B 从小到大排序
·将前N个人飞往A市，其余人飞往B市，并计算出总费用。
'''

class Solution:
    def twoCitySchedCost(self, costs: List[List[int]]) -> int:
        costs.sort(key = lambda x: x[0]-x[1])

        total = 0
        n = len(costs)//2

        for i in range(n):
            total += costs[i][0] + costs[i+n][1]
        return total
