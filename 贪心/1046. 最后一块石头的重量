# -*- coding: utf-8 -*-
'''
题目：
有一堆石头，每块石头的重量都是正整数。
每一回合，从中选出两块 最重的 石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：
如果 x == y，那么两块石头都会被完全粉碎；
如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 0。

例如：
输入：[2,7,4,1,8,1]
输出：1
解释：
先选出 7 和 8，得到 1，所以数组转换为 [2,4,1,1,1]，
再选出 2 和 4，得到 2，所以数组转换为 [2,1,1,1]，
接着是 2 和 1，得到 1，所以数组转换为 [1,1,1]，
最后选出 1 和 1，得到 0，最终数组转换为 [1]，这就是最后剩下那块石头的重量。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/last-stone-weight
'''

'''
思路：
1、排序
2、删除两个最重的石头，增加一个石头为两者的差值
3、不断重复步骤1和2，直到数组中还剩一个值，返回该值
trick：如果两块石头一样重，石头里增加一个重量为0的石头，这样每次都是删两个值，增加一个值。
优化：可以继续剪枝优化（判断数组中最多有一个值不为0，返回）

'''

class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        while len(stones) >1:
            stones.sort()
            stones.append(stones.pop()-stones.pop())
        
        return stones[0]
