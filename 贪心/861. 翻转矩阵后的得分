# -*- coding: utf-8 -*-
'''
题目：
有一个二维矩阵 A 其中每个元素的值为0或1 。
移动是指选择任一行或列，并转换该行或列中的每一个值：将所有0都更改为1，将所有1都更改为0。
在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。
返回尽可能高的分数。

例如：
输入：[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
输出：39
解释：
转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]
0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/score-after-flipping-matrix
'''

"""
思路：
矩阵每一行表示一个二进制数字，要使得分最大，必须每个二进制数字最大，但是只能翻转一整行或一整列。数字最大即从左往右左边的数尽量比右边大。
因此，先翻转行，每行第一个数是0就翻转这一整行，第一个是1就不动。
再翻转列，经过行翻转后第一列全为1了，从第二列（index=1）开始，翻转列只需保证1尽可能多。
"""

class Solution:
    def matrixScore(self, A: List[List[int]]) -> int:
        # 行变换
        for i in range(len(A)):
            if A[i][0]==0:
                A[i]=[1-tmp for tmp in A[i]]
         # 列变换
        for j in range(1,len(A[0])):
        #每列1的个数比0少才变换
            cnt1=sum(A[i][j] for i in range(len(A)))
            if cnt1<len(A)/2:
                for i in range(len(A)):
                    A[i][j]=0 if A[i][j] else 1
         # 计算得分
        res=0
        for i in range(len(A)):
            t=A[i][::-1]
            item=[val*2**inx for inx,val in zip(range(len(t)),t)]
            res=res+sum(item)
        return int(res)
