# -*- coding: utf-8 -*-
'''
题目：
字符串S由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。
返回一个表示每个字符串片段的长度的列表。

例如：
输入：S = "ababcbacadefegdehijhklij"
输出：[9,7,8]
解释：
划分结果为 "ababcbaca", "defegde", "hijhklij"。
每个字母最多出现在一个片段中。
像 "ababcbacadefegde", "hijhklij" 的划分是错误的，因为划分的片段数较少。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/partition-labels
'''

"""
思路：
对于遇到的每一个字母，去找这个字母最后一次出现的位置，用来更新当前的最小区间。
anchor和end分别表示当前区间的首尾。
如果遇到的字符最后一次出现的位置下标大于end， 就让end=last[c]来拓展当前的区间。
当遍历到了当前区间的末尾时(即 i==j )，把当前区间加入答案，同时将 start 设为 i+1 去找下一个区间。
"""

class Solution:
    def partitionLabels(self, S: str) -> List[int]:
        last = {element: index for index, element in enumerate(S)}
        end = anchor = 0
        ans = []
        for i, c in enumerate(S):
            end = max(end, last[c])
            if i == end:
                ans.append(i - anchor + 1)
                anchor = i + 1
        return ans
