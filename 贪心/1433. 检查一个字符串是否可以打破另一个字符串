# -*- coding: utf-8 -*-
'''
题目：
给你两个字符串 s1 和 s2 ，它们长度相等，请你检查是否存在一个 s1  的排列可以打破 s2 的一个排列，或者是否存在一个 s2 的排列可以打破 s1 的一个排列。
字符串 x 可以打破字符串 y （两者长度都为 n ）需满足对于所有 i（在 0 到 n - 1 之间）都有 x[i] >= y[i]（字典序意义下的顺序）。

例如：
输入：s1 = "abc", s2 = "xya"
输出：true
解释："ayx" 是 s2="xya" 的一个排列，"abc" 是字符串 s1="abc" 的一个排列，且 "ayx" 可以打破 "abc" 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/check-if-a-string-can-break-another-string
'''

"""
思路：
排序后，然后按对应位置取出，对于对应位置元素相同的，不用考虑，只考虑对对应位置不同的元素。
记录s1和s2某一方大于另一方的情况的次数和，然后最后比较他们差值的绝对值和不同元素长度的长度关系即可
"""

class Solution:
    def checkIfCanBreak(self, s1: str, s2: str) -> bool:
        length = len(s1)
        s1_list, s2_list = sorted(list(s1)), sorted(list(s2))
        s1_count, s2_count, same = 0, 0, 0
        for a, b in zip(s1_list, s2_list):
            if a>b:
                s1_count += 1
            elif a<b:
                s2_count += 1
            else:
                same += 1
        if abs(s1_count - s2_count) == length-same:
            return True
        else:
            return False
