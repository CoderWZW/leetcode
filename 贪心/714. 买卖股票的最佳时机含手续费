"""
题目： 
给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。
你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
返回获得利润的最大值。
注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
输出: 8
解释: 能够达到的最大利润:  
在此处买入 prices[0] = 1
在此处卖出 prices[3] = 8
在此处买入 prices[4] = 4
在此处卖出 prices[5] = 9
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee
"""

"""
思路：
我们维护两个变量 cash 和 hold，前者表示当我们不持有股票时的最大利润，后者表示当我们持有股票时的最大利润。

在第 i 天时，我们需要根据第i−1 天的状态来更新 cash 和 hold 的值。对于cash，我们可以保持不变，或者将手上的股票卖出，状态转移方程为
cash = max(cash, hold + prices[i] - fee)

对于 hold，我们可以保持不变，或者买入这一天的股票，状态转移方程为
hold = max(hold, cash - prices[i])
在计算这两个状态转移方程时，我们可以不使用临时变量来存储第i−1 天cash 和 hold 的值，而是可以先计算 cash 再计算 hold，原因是在同一天卖出再买入（亏了一笔手续费）一定不会比不进行任何操作好。
"""

class Solution(object):
    def maxProfit(self, prices, fee):
        cash, hold = 0, -prices[0]
        for i in range(1, len(prices)):
            cash = max(cash, hold + prices[i] - fee)
            hold = max(hold, cash - prices[i])
        return cash
