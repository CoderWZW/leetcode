# -*- coding: utf-8 -*-
'''
题目：
给定一个由若干 0 和 1 组成的数组 A，我们最多可以将 K 个值从 0 变成 1 。
返回仅包含 1 的最长（连续）子数组的长度。

例如：
输入：A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
输出：6
解释： 
[1,1,1,0,0,1,1,1,1,1,1]
粗体数字从 0 翻转到 1，最长的子数组长度为 6。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/max-consecutive-ones-iii
'''

'''
思路：
滑动窗口
'''

class Solution:
    def longestOnes(self, A, K):
        left, right = 0, 0
        count = 0
        for right in range(len(A)): #遍历数组
            if A[right] == 0:       #如果新加元素为0，count加1
                count += 1
            if count > K:           #如果count大于K，说明超出了限制，需要判断
                if A[left] == 0:    #如果左侧数为0，则减小count，增加右侧，如果为1，则count不变，保持为最大窗
                    count -= 1
                left += 1           #不管左侧元素为0或1，窗口都要后移
        return right - left + 1     #遍历结束返回窗口大小
