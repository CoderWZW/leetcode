# -*- coding: utf-8 -*-
'''
题目：
给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 
如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。

例如：
输入:
输入：head = [3,2,0,-4], pos = 1
输出：返回索引为 1 的链表节点
解释：链表中有一个环，其尾部连接到第二个节点。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/linked-list-cycle-ii
'''

'''
思路： 双指针
设置两个指针fast, slow指向链表头部 head，fast 每轮走 2 步，slow 每轮走 1 步
第一种结果： fast 指针走过链表末端，说明链表无环，直接返回 null
若有环，两指针一定会相遇。因为每走 1 轮，fast 与 slow 的间距 +1，fast 终会追上 slow；
第二种结果： 当fast == slow时， 两指针在环中 第一次相遇 。下面分析此时fast 与 slow走过的步数关系 ：
设链表共有 a+b 个节点，其中链表头部到链表入口 有 a 个节点（不计链表入口节点）， 链表环有b 个节点；设两指针分别走了f，s 步，则有：
fast 走的步数是slow步数的 2 倍，即 f=2s
fast 比 slow多走了 n 个环的长度，即 f=s+nb；
以上两式相减得：、f=2nb，s=nb，即fast和slow 指针分别走了2n，n 个环的周长
'''

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        fast, slow = head, head
        while True:
            if not (fast and fast.next):
                return
            fast, slow = fast.next.next, slow.next
            if fast == slow:
                break
        fast = head
        while fast!=slow:
            fast, slow = fast.next, slow.next
        return fast
