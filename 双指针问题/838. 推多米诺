# -*- coding: utf-8 -*-
'''
题目：
一行中有 N 张多米诺骨牌，我们将每张多米诺骨牌垂直竖立。
在开始时，我们同时把一些多米诺骨牌向左或向右推。
每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。
同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。
如果同时有多米诺骨牌落在一张垂直竖立的多米诺骨牌的两边，由于受力平衡， 该骨牌仍然保持不变。
就这个问题而言，我们会认为正在下降的多米诺骨牌不会对其它正在下降或已经下降的多米诺骨牌施加额外的力。
给定表示初始状态的字符串 "S" 。如果第 i 张多米诺骨牌被推向左边，则 S[i] = 'L'；如果第 i 张多米诺骨牌被推向右边，则 S[i] = 'R'；
如果第 i 张多米诺骨牌没有被推动，则 S[i] = '.'。
返回表示最终状态的字符串。

例如：
输入：".L.R...LR..L.."
输出："LL.RR.LLRRLL.."

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/push-dominoes
'''

'''
思路： 双指针
对于每组垂直多米诺骨牌（'.'），我们有两个非垂直多米诺骨牌将他们分割开。
因为在这个组外的多米诺骨牌不会有影响，我们可以分别分析每组的情况：
一共有 9 种可能（由于边界多米诺可能是空）。
实际上，如果我们用 L 和 R 的多米诺骨牌作为边界，最多只有 4 种情况。
· 如果我们有 "A....B"，当 A = B，那么就变成 "AAAAAA"。
· 如果我们有 "R....L"，那么结果会变成 "RRRLLL" 或者 "RRR.LLL" 如果点的个数是奇数。
如果初始标记的坐标是 i 和 j，我们可以检查距离 k-i 和 j-k 来决定位置 k 的形态是 'L'，'R' 还是 '.'。
· 如果我们有 "L....R"，就什么都不做，跳过。
'''

class Solution(object):
    def pushDominoes(self, dominoes):
        """
        :type dominoes: str
        :rtype: str
        """
        r = -1
        index =0
        res= list(dominoes)
        size = len(dominoes)

        while index<size:
            if index>0 and dominoes[index]=='L'and dominoes[index-1]=='.':
                if r==-1:
                    cur_l=index-1
                    while cur_l>=0 and dominoes[cur_l]=='.':
                        res[cur_l]='L'
                        cur_l-=1
                else:
                    cur_r = r+1
                    cur_l = index-1
                    while True:
                        if cur_r>=cur_l:
                            break
                        res[cur_r]='R'
                        res[cur_l]='L'
                        cur_r+=1
                        cur_l-=1
                    r=-1
            elif r==-1 and index<size-1 and dominoes[index]=='R'and dominoes[index+1]=='.':
                r = index
            elif r!=-1 and dominoes[index]=='R':
                for i in range(r+1,index):
                    res[i]='R'
                r=-1
                index-=1

            index+=1

        if r!=-1:
            for i in range(r+1,size):
                res[i]='R'

        return ''.join(res)
