# -*- coding: utf-8 -*-
'''
题目：
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

例如：
输入: [0,1,0,3,12]
输出: [1,3,12,0,0]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/move-zeroes/
'''

'''
思路：双指针法
创建两个指针i,j，第一次遍历的时候指针j用来记录当前有多少个非0元素，即遍历的时候每遇到一个非0元素就将其往数组左边挪
第一次遍历完后，j指针的下标就指向了最后一个非0元素下标
第二次遍历的时候，起始位置从j开始到结束，将剩下的这段区域内的元素全部置为0
'''

class Solution(object):
	def moveZeroes(self, nums):
		"""
		:type nums: List[int]
		:rtype: None Do not return anything, modify nums in-place instead.
		"""
		if not nums:
			return 0
		# 第一次遍历的时候，j指针记录非0的个数，只要是非0的统统都赋给nums[j]	
		j = 0
		for i in xrange(len(nums)):
			if nums[i]:
				nums[j] = nums[i]
				j += 1
		# 非0元素统计完了，剩下的都是0了
		# 所以第二次遍历把末尾的元素都赋为0即可
		for i in xrange(j,len(nums)):
			nums[i] = 0
