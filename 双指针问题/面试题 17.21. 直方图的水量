# -*- coding: utf-8 -*-
'''
题目：
给定一个直方图(也称柱状图)，假设有人从上面源源不断地倒水，最后直方图能存多少水量?直方图的宽度为 1。

例如：
输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/volume-of-histogram-lcci/
'''

'''
思路：双指针法
1.首先排除一种情况，当数字在两个或者以下的时候，蓄水池无法蓄水。
2.创建一个数组（water），蓄水池每一个柱加上水能存的最大高度，默认每一个格子都能存到最高的柱子的水。每个柱都是max(height)。
3.从前往后循环遍历height，逐个判断找到这个遍历中的最大值，并将最大值写入数组（water），如果当前height等于max(height)，退出循环。
4.从后往前遍历
5.水的最大高度求和 - 石头求和（题目给的柱状图数组）
'''

class Solution:
    def trap(self, height: List[int]) -> int:
        # 两个以下的宽度无法蓄水
        if len(height) <= 2:
            return 0
        height_max =  max(height)
        water = [height_max] * len(height)
        
        # 从前往后
        start_max = 0
        for i in range(0,len(height),1):
            if height[i]>=start_max:
                start_max = height[i]
            if start_max == height_max:
                break
            water[i] = start_max
        
        # 从后往前
        end_max = 0
        for i in range(len(height)-1,-1,-1):
            if height[i]>=end_max:
                end_max = height[i]
            if end_max == height_max:
                break
            water[i] = end_max
        
        # 蓄水高度 - 石头高度
        return sum(water) - sum(height)
