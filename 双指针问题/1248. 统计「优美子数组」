# -*- coding: utf-8 -*-
'''
题目：
给你一个整数数组 nums 和一个整数 k。
如果某个 连续 子数组中恰好有 k 个奇数数字，我们就认为这个子数组是「优美子数组」。
请返回这个数组中「优美子数组」的数目。

例如：
输入：nums = [1,1,2,1,1], k = 3
输出：2
解释：包含 3 个奇数的子数组是 [1,1,2,1] 和 [1,2,1,1]。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-number-of-nice-subarrays
'''

'''
思路： 滑动窗口
找到第 i 个奇数的位置，找到第i+k-1个奇数的位置，这就确定了两个边界，再看这两个边界的活动范围有多大就知道有几种组合了。
左边界的活动范围在当前第 i 个奇数到上一个奇数(即 i-1)之间，右边界的活动范围在当前第 i+k-1 到下一个边界(即 i+k)之间。
左边范围 * 右边活动范围 在各个位置上的累加就是结果。
遍历 i 的过程中需要注意遍历的范围，不要越界。
前缀和算法：可以将奇数看作1，偶数看作0，计算数组之和
'''

class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        odd_positions = [0]  # 设定一个数组记录奇数的位置，0代表当前位置之前的一个奇数的位置(fake point)
        for i in range(len(nums)):
            if nums[i] % 2 == 1:
                odd_positions.append(i + 1)  # 将位置压入
        odd_positions.append(len(nums) + 1)  # len(nums)+1代表最后一个奇数位之后的奇数位置(fake point)
        count = 0
        for i in range(1, len(odd_positions) - k):
            # 当前奇数位置 i 到前一个奇数位置之间选一个位置 * i 后的第 k-1 个奇数的位置到 i 后的第 k 个奇数节点范围内选一个
            count += ((odd_positions[i] - odd_positions[i - 1]) *
                      (odd_positions[i + k] - odd_positions[i + k - 1]))  # 组合数
        return count
