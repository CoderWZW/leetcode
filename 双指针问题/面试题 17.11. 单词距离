# -*- coding: utf-8 -*-
'''
题目：
有个内含单词的超大文本文件，给定任意两个单词，找出在这个文件中这两个单词的最短距离(相隔单词数)。
如果寻找过程在这个文件中会重复多次，而每次寻找的单词不同，你能对此优化吗?

例如：
输入：words = ["I","am","a","student","from","a","university","in","a","city"], word1 = "a", word2 = "student"
输出：1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-closest-lcci
'''

'''
思路：双指针问题
用双指针法可以做这题.一个指针用for循环实现，始终往前遍历;一个指针i指向前一个word1或者word2.
在一个for循环里遍历word里每一个词，每遇到word1或者word2时，如果当前词与i的词不同就做差求距离，然后将i指向当前j的位置，然后继续向前遍历。
i一定指向word1或word2,但i=0时不一定，所以加入条件(words[i] == word1 or words[i] == word2)
'''

class Solution:
    def findClosest(self, words: List[str], word1: str, word2: str) -> int:
        i, ans = 0, len(words)
        for j, word in enumerate(words):
            if word == word1 or word == word2:  # 遇到两个词之一
                if word != words[i] and (words[i] == word1 or words[i] == word2):
                    ans = min(ans, j - i) 
                i = j       # 每次都更新 i即可指向word1也可指向word2               
        return ans
