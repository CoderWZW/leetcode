# -*- coding: utf-8 -*-
'''
题目：
给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。
初始化 A 和 B 的元素数量分别为 m 和 n

例如：
输入:
A = [1,2,3,0,0,0], m = 3
B = [2,5,6],       n = 3
输出: [1,2,2,3,5,6]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sorted-merge-lcci
'''

'''
思路： 双指针
为了利用A和B两个数组已经排序的性质，我们可以使用双指针方法。这一方法将两个数组看作队列，每次从两个数组头部取出比较小的数字放到结果中。
'''

class Solution:
    def merge(self, A: List[int], m: int, B: List[int], n: int) -> None:
        """
        Do not return anything, modify A in-place instead.
        """
        pointer1, pointer2 = 0, 0
        result = []
        while pointer1<m or pointer2<n:
            if pointer1 == m:
                result.append(B[pointer2])
                pointer2 += 1
            elif pointer2 == n:
                result.append(A[pointer1])
                pointer1 += 1
            elif A[pointer1] < B[pointer2]:
                result.append(A[pointer1])
                pointer1 += 1
            else:
                result.append(B[pointer2])
                pointer2 += 1
        A[:] = result
