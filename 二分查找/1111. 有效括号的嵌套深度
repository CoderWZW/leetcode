# -*- coding: utf-8 -*-
'''
题目：
给你一个「有效括号字符串」 seq，请你将其分成两个不相交的有效括号字符串，A 和 B，并使这两个字符串的深度最小。

例如：
输入：seq = "(()())"
输出：[0,1,1,1,1,0]

链接：https://leetcode-cn.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/solution/you-xiao-gua-hao-de-qian-tao-shen-du-by-leetcode-s/
来源：力扣（LeetCode）
'''

'''
思路：
要求划分出使得最大嵌套深度最小的分组，我们首先得知道如何计算嵌套深度。我们可以通过栈实现括号匹配来计算：
维护一个栈 s，从左至右遍历括号字符串中的每一个字符：
如果当前字符是 (，就把 ( 压入栈中，此时这个 ( 的嵌套深度为栈的高度；
如果当前字符是 )，此时这个 ) 的嵌套深度为栈的高度，随后再从栈中弹出一个 (。

只要在遍历过程中，我们保证栈内一半的括号属于序列A，一半的括号属于序列B，那么就能保证拆分后最大的嵌套深度最小，是当前最大嵌套深度的一半。
要实现这样的对半分配，我们只需要把奇数层的(分配给A，偶数层的(分配给B 即可。

'''

class Solution:
    def maxDepthAfterSplit(self, seq: str) -> List[int]:
        ans = []
        d = 0
        for i in seq:
            if i=="(":
                d+=1
                ans.append(d%2)
            else:
                ans.append(d%2)
                d-=1
        return ans
