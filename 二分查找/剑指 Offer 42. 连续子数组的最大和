# -*- coding: utf-8 -*-
'''
题目：
输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。
要求时间复杂度为O(n)。

例如：
输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/
'''

'''
思路：
二叉搜索树的中序遍历为 递增序列 。
1.连续子数组的最大和,先分析两种极端情况：
[1]数组全为负数 如 nums = [-1，-2，-3，-4，-5] 连续子数组的最大和为 nums[0]
[2]数组中存在一个正数 如 nums = [-1，-2，1，-4，-5] 连续子数组的最大和为 nums[2] 1
可以看出要想获得最大连续的子数组和，必须添加进去的数字为正数
'''

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxnum = nums[0]
        for i in range(1,len(nums)):
            last_num = nums[i-1]
            if last_num > 0:
                nums[i] += last_num
            maxnum = max(maxnum, nums[i])
        return maxnum
