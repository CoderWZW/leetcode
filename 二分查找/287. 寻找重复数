# -*- coding: utf-8 -*-
'''
题目：
给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。

例如：
输入: [1,3,4,2,2]
输出: 2

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-the-duplicate-number
'''

'''
思路： 二分查找+抽屉原理
· 对数据范围 1~n 做二分，对于每一个数m，如果遍历数组，那么在l到m之间的数的个数应该为m-l+1，(l<=m)。
· 以此，我们可以不停地二分，如果 l 到 m 之间的个数大于 m−l+1，那么我们就在左边继续找，否则就在右边继续找，每次查找的范围都是有重复数字的一组数。
· 直到 l==r 时，因为我们已经确定这组数中有重复数字，并且数组已经缩小到了 1 个，那么该数 l 就是重复的数。
'''

from typing import List
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        size = len(nums)
        left = 1
        right = size - 1

        while left < right:
            mid = left + (right - left) // 2

            cnt = 0
            for num in nums:
                if num <= mid:
                    cnt += 1
            # 根据抽屉原理，小于等于 4 的数的个数如果严格大于 4 个，
            # 此时重复元素一定出现在 [1, 4] 区间里

            if cnt > mid:
                # 重复的元素一定出现在 [left, mid] 区间里
                right = mid
            else:
                # if 分析正确了以后，else 搜索的区间就是 if 的反面
                # [mid + 1, right]
                left = mid + 1
        return left
