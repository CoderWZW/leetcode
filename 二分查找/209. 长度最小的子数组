# -*- coding: utf-8 -*-
'''
题目：

给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。
如果不存在符合条件的子数组，返回 0。

输入：s = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-size-subarray-sum/
'''

'''
思路：双指针
定义两个指针start 和end分别表示子数组的开始位置和结束位置，维护变量sum存储子数组中的元素和
初始状态下，start和end都指向下标0，sum的值为0
每一轮迭代，将nums[end]加到sum, 如何sum>=s，更新子数组的最小长度，然后将将nums[start]从sum中减去并将start右移，直到sum<s
在此过程中同样更新子数组的最小长度
在每一轮迭代的最后，将end右移
'''

class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        if not nums:
            return 0
        
        n = len(nums)
        ans = n + 1
        start, end = 0, 0
        total = 0
        while end < n:
            total += nums[end]
            while total >= s:
                ans = min(ans, end - start + 1)
                total -= nums[start]
                start += 1
            end += 1
        
        return 0 if ans == n + 1 else ans
