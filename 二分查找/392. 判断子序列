# -*- coding: utf-8 -*-
'''
题目： 
给定字符串 s 和 t ，判断 s 是否为 t 的子序列。
你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 <=100）。

字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。
（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。

例如：
s = "abc", t = "ahbgdc"
返回 true.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/is-subsequence
'''

'''
思路：
二分搜索：
我们初始化两个指针 i 和 j，分别指向 s 和 t 的初始位置。
每次贪心地匹配，匹配成功则 i 和 j 同时右移，匹配 s 的下一个位置，匹配失败则 j 右移，i 不变，尝试用 t 的下一个字符匹配 s。

最终如果 i 移动到 s 的末尾，就说明 s 是 t 的子序列。
'''

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        pointer1 = 0
        pointer2 = 0
        n1 = len(s)
        n2 = len(t)
        while pointer1<n1 and pointer2<n2:
            if s[pointer1]==t[pointer2]:
                pointer1+=1
            pointer2+=1
        return pointer1 == n1
