# -*- coding: utf-8 -*-
'''
题目：
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

例如：
输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array
'''

'''
思路：二分查找
因为数组已经排过序了，我们可以使用二分查找的方法去定位左右下标.

'''

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
    	left_index = self.extreme_insertion_index(nums, target, True)
    	if left_index == len(nums) or nums[left_index] != target:
    		return [-1, -1]

    	return [left_index, self, extreme_insertion_index(nums, target, False)]


    def extreme_insertion_index(self, nums, target, left):
    	pass
    	lo, hi = 0, len(nums)

    	while lo<=hi:
    		mid = (lo+hi)//2
    		if nums[mid] > target or (left and target == nums[mid]):
    			hi = mid
    		else:
    			lo = mid+1
    	return lo
