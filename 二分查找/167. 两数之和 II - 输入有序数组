# -*- coding: utf-8 -*-
'''
题目：

给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。

说明:
返回的下标值（index1 和 index2）不是从零开始的。
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。

输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted

'''

'''
思路： 二分查找 或 双指针
'''

########## 二分查找算法实现 ##########
# class Solution:
#     def twoSum(self, numbers: List[int], target: int) -> List[int]:
#         n = len(numbers)
#         for i in range(n):
#             low, high = i + 1, n - 1
#             while low <= high:
#                 mid = (low + high) // 2
#                 if numbers[mid] == target - numbers[i]:
#                     return [i + 1, mid + 1]
#                 elif numbers[mid] > target - numbers[i]:
#                     high = mid - 1
#                 else:
#                     low = mid + 1
#         return [-1, -1]

########## 双指针算法实现 ##########
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        low, high = 0, len(numbers) - 1
        while low < high:
            total = numbers[low] + numbers[high]
            if total == target:
                return [low + 1, high + 1]
            elif total < target:
                low += 1
            else:
                high -= 1

        return [-1, -1]
