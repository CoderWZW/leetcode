# -*- coding: utf-8 -*-
'''
题目：

传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。
传送带上的第 i 个包裹的重量为 weights[i]。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。
返回能在 D 天内将传送带上的所有包裹送达的船的最低运载能力。

示例:
输入：weights = [1,2,3,4,5,6,7,8,9,10], D = 5
输出：15
解释：
船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：
第 1 天：1, 2, 3, 4, 5
第 2 天：6, 7
第 3 天：8
第 4 天：9
第 5 天：10

请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days

'''

'''
思路： 二分查找算法（注意边界）
'''

class Solution:
    def shipWithinDays(self, weights: List[int], D: int) -> int:
        # 定义由重量列表、重量限制，求搬运天数的方法
        def get_days(lst,limit):
            r = 0
            record = []
            # 遍历重量列表
            for w in lst:
                # 若加完当前重量仍未超限制，将当前重量加起来
                if r+w<=limit:
                    r+=w
                # 若加完超限，则将超限前的重量加入结果列表中
                else:
                    record.append(r)
                    r = w
            record.append(r)
            # record 即记录每天搬运重量的列表，长度为天数
            return len(record)
        # 二分法查找重量限制
        # 左边界，重量限制最小值，重量列表最大值
        left = max(weights)
        # 右边界，重量限制最大值，重量列表求和
        right = sum(weights)
        # 如果二者相等，说明列表就一个元素
        if left==right:
            return left
        # while 循环控制移动左右边界
        while left<right:
            # 取中点
            mid = (left+right)//2
            # 通过定义的方法获取天数
            result = get_days(weights,mid)
            # 如果天数大于目标，说明重量限制偏小，移动左边界
            if result>D:
                left = mid+1
            # 否则移动右边界
            else:
                right = mid
        # 最终将跳出 while 循环的结果返回
        return left
