# -*- coding: utf-8 -*-
'''
题目：
给定一个正整数数组 w ，其中 w[i] 代表下标 i 的权重（下标从 0 开始），请写一个函数 pickIndex ，它可以随机地获取下标 i，选取下标 i 的概率与 w[i] 成正比。
例如，对于 w = [1, 3]，挑选下标 0 的概率为 1 / (1 + 3) = 0.25 （即，25%），而选取下标 1 的概率为 3 / (1 + 3) = 0.75（即，75%）。
也就是说，选取下标 i 的概率为 w[i] / sum(w) 。

例如：
输入: piles = [3,6,7,11], H = 8
输出: 4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/random-pick-with-weight
'''

'''
思路： 几何解释
题目说给位置i加个权重，比如w = [1, 3]，0对应的权重为1，1对应的权重为3，说明选到0的概率为0.25, 对应1的概率为0.75
如果落在在0~0.25之间，我们都认为他选中了0，
落在0.25~1 之间，我们认为选中了1，这样满足概率，就满足他赋予的权重。
'''

class Solution:
    def __init__(self, w: List[int]):
        probability = [0] * len(w)
        _sum = sum(w)
        cur = 0
        for i in range(len(w)):
            cur += w[i]
            probability[i] = cur / _sum
        self.probability = probability

    def pickIndex(self) -> int:
        return bisect.bisect_right(self.probability, random.random())
