# -*- coding: utf-8 -*-
'''
题目：
给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 
请你统计并返回 grid 中 负数 的数目。

例如：
输入：grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
输出：8
解释：矩阵中共有 8 个负数。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-negative-numbers-in-a-sorted-matrix
'''

'''
思路：
二分查找
由于题目中给出了一个性质，即矩阵中的元素无论是按行还是按列，都以非递增顺序排列，可以考虑把这个性质利用起来优化暴力。
已知这个性质告诉了我们每一行的数都是有序的，所以我们通过二分查找可以找到每一行中从前往后的第一个负数，那么这个位置之后到这一行的末尾里所有的数必然是负数了，可以直接统计。
· 遍历矩阵的每一行。
· 二分查找到该行从前往后的第一个负数，考虑第i行，我们记这个位置为 pos_i，那么第i行 [pos_i,m-1]中的所有数都是负数，
所以这一行对答案的贡献就是 m-1-pos_i+1=m-pos_i。
· 最后的答案就是 sum_{i=0}^{n-1}(m-pos_i)
'''

class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        m, n = len(grid[0]), len(grid)
        res, ind = 0,m
        for i in range(n):
            if ind==0:
                break
            if grid[i][ind-1]>=0:
                continue
            left, right = 0, ind
            while left<right:
                mid = left+(right-left)//2
                if grid[i][mid]>=0:
                    left = mid+1
                else:
                    right = mid
            res += (ind-left)*(n-i)
            ind = left
        return res
