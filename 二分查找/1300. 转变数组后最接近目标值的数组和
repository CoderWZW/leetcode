# -*- coding: utf-8 -*-
'''
题目： 
给你一个整数数组 arr 和一个目标值 target ，请你返回一个整数 value ，使得将数组中所有大于 value 的值变成 value 后，数组的和最接近  target （最接近表示两者之差的绝对值最小）。
如果有多种使得和最接近 target 的方案，请你返回这些整数中的最小值。
请注意，答案不一定是 arr 中的数字。

输入：arr = [4,9,3], target = 10
输出：3
解释：当选择 value 为 3 时，数组会变成 [3, 3, 3]，和为 9 ，这是最接近 target 的方案。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target
'''

'''
思路： 枚举+二分法
1、判断value的上下界，对value进行枚举；
2、分析value的上下界，value 的下界为 0。这是因为当 value = 0 时，数组的和为 0。由于 target 是正整数，因此当 value 继续减小时，数组的和也会随之减小，且变为负数；
3、 value 的上界为数组 arr 中的最大值。这是因为当 value >= arr 时，数组中所有的元素都不变，因为它们均不大于 value。由于我们需要找到最接近 target 的最小 value 值，因此我们只需将数组 arr 中的最大值作为上界即可。
4、当我们确定了 value 值的上下界之后，就可以进行枚举了。
'''

# class Solution:
#     def findBestValue(self, arr: List[int], target: int) -> int:
#         arr.sort()
#         n = len(arr)
#         prefix = [0]
#         for num in arr:
#             prefix.append(prefix[-1]+num)

#         r, ans, diff = max(arr), 0, target
#         for i in range(1, r+1):
#             it = bisect.bisect_left(arr, i)
#             cur = prefix[it]+(n-it)*i
#             if abs(cur-target)<diff:
#                 ans, diff = i, abs(cur-target)
#         return ans

class Solution:
    def findBestValue(self, arr: List[int], target: int) -> int:
        arr.sort()
        n = len(arr)
        prefix = [0]
        for num in arr:
            prefix.append(prefix[-1] + num)
        
        l, r, ans = 0, max(arr), -1
        while l <= r:
            mid = (l + r) // 2
            it = bisect.bisect_left(arr, mid)
            cur = prefix[it] + (n - it) * mid
            if cur <= target:
                ans = mid
                l = mid + 1
            else:
                r = mid - 1

        def check(x):
            return sum(x if num >= x else num for num in arr)
        
        choose_small = check(ans)
        choose_big = check(ans + 1)
        return ans if abs(choose_small - target) <= abs(choose_big - target) else ans + 1
