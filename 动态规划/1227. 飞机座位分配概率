# -*- coding: utf-8 -*-
'''
题目：
有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。
剩下的乘客将会：
如果他们自己的座位还空着，就坐到自己的座位上，
当他们自己的座位被占用时，随机选择其他座位
第 n 位乘客坐在自己的座位上的概率是多少？

例如：
输入：n = 1
输出：1.00000
解释：第一个人只会坐在自己的位置上。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/airplane-seat-assignment-probability
'''

'''
思路：动态规划--卡特兰数问题
不管每个乘客编号是多少，我们不用管，我们只要看他入场的次序就行了，所以我们就按照入场次序给他们重新编个号，这样的话就是按照1到n的编号入场了（也就是这里的编号代表的是入场的次序，而不是实际的座位号）
然后就是 1 号进场了，可以分为下面几种情况：
1/n的概率选择坐在1号座位上。这样2到n号位置都不会被占，那么n号坐在自己座位的概率就是1.0
1/n的概率选择坐在n号座位上。这样2到n−1号位置都不会被占，而n号只能坐在1号座位上，那么概率就是0.0 。
1/n的概率选择坐在i号座位上，其中 2≤i≤n−1。这样2到i−1号位置都不会被占，他们都坐在自己的的位置上。
而i号乘客就犯难了，他的座位被1号占了，他不知道坐哪了。这时候，如果他选择坐1号座位，那么i+1到n号乘客还是坐在自己位置，相安无事。
而如果他选择坐在i+1到n号中的某个位置，那么必然又会产生新的冲突，这样就不好求解了啊！
现在面临的问题是，i号选择坐在哪？这时候还没入场的有i到n号乘客，而座位还剩1和i+1到n号。那既然i号乘客坐在1号座位的话，后面的人都能坐回原位，
那我们就把1号座位当作是i号乘客原本的座位就行了嘛，反正我最后又不要求i号乘客坐回原位的概率，你坐哪都没事，只要别影响到其他人就行了。那么问题的规模就被缩小到了n−i+1 ，我们递归求解就行了。
'''

class Solution:
    def nthPersonGetsNthSeat(self, n: int) -> float:
        return 1 if n==1 else 0.5
