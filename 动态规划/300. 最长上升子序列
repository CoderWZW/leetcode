# -*- coding: utf-8 -*-
'''
题目：
给定一个无序的整数数组，找到其中最长上升子序列的长度。

例如：
输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-increasing-subsequence/
'''

'''
思路： 动态规划
· 状态定义：
dp[i]的值代表nums前i个数字的最长子序列长度
· 转移方程：考虑每轮计算新 dp[i]时，遍历 [0,i) 列表区间，做以下判断：
（1）当 nums[i] > nums[j] 时： nums[i] 可以接在 nums[j] 之后（此题要求严格递增），此情况下最长上升子序列长度为 dp[j] + 1
（2）当 nums[i] <= nums[j]时： nums[i] 无法接在 nums[j] 之后，此情况上升子序列不成立，跳过。
（3）上述所有 1. 情况 下计算出的 dp[j] + 1 的最大值，为直到 i 的最长上升子序列长度（即 dp[i] ）。实现方式为遍历 j 时，每轮执行 dp[i] = max(dp[i], dp[j] + 1)。
（4）转移方程： dp[i] = max(dp[i], dp[j] + 1) for j in [0, i)
· 初始状态：
dp[i] 所有元素置 1，含义是每个元素都至少可以单独成为子序列，此时长度都为 1
· 返回值：
返回 dp 列表最大值，即可得到全局最长上升子序列长度。

'''

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        dp = [1]*len(nums)
        for i in range(len(nums)):
            for j in range(i):
                if nums[j]<nums[i]:
                    dp[i] = max(dp[i], dp[j]+1)
        return max(dp)
