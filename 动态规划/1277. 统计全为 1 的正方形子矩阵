# -*- coding: utf-8 -*-
'''
题目：
给你一个 m * n 的矩阵，矩阵中的元素不是 0 就是 1，
请你统计并返回其中完全由 1 组成的正方形子矩阵的个数。

例如：
输入：matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
输出：15
解释： 
边长为 1 的正方形有 10 个。
边长为 2 的正方形有 4 个。
边长为 3 的正方形有 1 个。
正方形的总数 = 10 + 4 + 1 = 15.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones
'''

'''
思路：动态规划
正方形最大数这一问题，主要考虑每个格子左上、左和上这三个方位的情况即可，
因为正方形的面积等于格子上的数(0或1)，我们不妨将面积看成正方形边长，
这并不影响结论，这三个方向形成的最小边长即决定了这个各自是否能形成坐标下表示的最大边长。
同时，计算边长而非面积可以避免重复计算的问题。
'''

class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        dp = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]
        res = 0

        for i in range(len(matrix)):
            for j in range(len(matrix[i])):
                if i == 0 or j == 0: # 边界上为特殊情况，直接返回matrix[i][j]的值即可
                    dp[i][j] = matrix[i][j]
                elif matrix[i][j] == 0:
                    dp[i][j] = 0
                elif i > 0 and j > 0:
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                res += dp[i][j]
        
        return res
