# -*- coding: utf-8 -*-
'''
题目：
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

例如：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber
'''

'''
思路：动态规划--最大最小问题
第i级台阶是第i-1级台阶的阶梯顶部。
踏上第i级台阶花费cost[i]，直接迈一大步跨过而不踏上去则不用花费。
到达第i级台阶的阶梯顶部的最小花费，有两个选择：
· 先付出最小总花费minCost[i-1]到达第i级台阶（即第i-1级台阶的阶梯顶部），踏上第i级台阶需要再花费cost[i]，再迈一步到达第i级台阶的阶梯顶部，最小总花费为minCost[i-1] + cost[i])
· 先付出最小总花费minCost[i-2]到达第i-1级台阶（即第i-2级台阶的阶梯顶部），踏上第i-1级台阶需要再花费cost[i-1]，再迈两步跨过第i级台阶直接到达第i级台阶的阶梯顶部，最小总花费为minCost[i-2] + cost[i-1])；
'''

class Solution:
    def rob(self, nums: List[int]) -> int:
        if not nums:
            return 0
        n = len(nums)
        if n==1:
            return nums[0]
        maxmoney = [0]*n
        maxmoney[0] = nums[0]
        maxmoney[1] = max(nums[0], nums[1])
        for i in range(2, n):
            maxmoney[i] = max(maxmoney[i - 2] + nums[i], maxmoney[i - 1])
        return maxmoney[n-1]
