# -*- coding: utf-8 -*-
'''
题目：
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

例如：
输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-binary-search-trees
'''

'''
思路：动态规划
临界分析：dp[0]=1, dp[1]=1
初始化：dp = [0]*(n+1)
状态转移：
dp[i] += dp[j-1]*dp[i-j]
'''

class Solution:
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        G = [0]*(n+1)
        G[0], G[1] = 1, 1

        for i in range(2, n+1):
            for j in range(1, i+1):
                G[i] += G[j-1] * G[i-j]

        return G[n]
