# -*- coding: utf-8 -*-
'''
题目：
给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。
注意:
每个数组中的元素不会超过 100
数组的大小不会超过 200

例如：
输入: [1, 5, 11, 5]
输出: true
解释: 数组可以分割成 [1, 5, 5] 和 [11].

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/partition-equal-subset-sum
'''

'''
思路：动态规划--0-1背包
F(N, C)：N为数组中数字个数，C为sum/2
'''

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        numSum = sum(nums)
        if numSum % 2 != 0:
            return False
        
        capacity = numSum // 2
        if capacity < max(nums):
            return False
        
        bag = [False] * (capacity+1)
        bag[0] = True
        for num in nums:
            for j in range(len(bag)-1, -1, -1):
                if j >= num:
                    bag[j] |= bag[j-num]

        return bag[len(bag)-1]
