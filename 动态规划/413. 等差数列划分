# -*- coding: utf-8 -*-
'''
题目：
如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。
例如，以下数列为等差数列:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9

例如：
A = [1, 2, 3, 4]
返回: 3, A 中有三个子等差数组: [1, 2, 3], [2, 3, 4] 以及自身 [1, 2, 3, 4]。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/arithmetic-slices/
'''

'''
思路：
首先遍历原数组 nums，用数组 diffs 存储相邻两个元素之间的差值。
然后遍历 diffs，用数组 cons 存储其中连续相同的差值的数目，比如有 33 个 33 连在一起，意味着原数组中这个位置存在一个最大长度为 44 的等差数列。
然后遍历 cons，对于长度为 n 的等差数列，其所有的长度大于等于 33 的子数列都是等差数列，则一共有 (n-2)(n-1)/2 个等差数列。
全部相加得到结果。
'''

class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        
        # 第一次遍历
        diffs = []
        for i in range(len(nums) - 1):
            diffs.append(nums[i + 1] - nums[i])
            
        # 第二次遍历
        cons = []
        a = 1
        for i in range(1, len(diffs)):
            if diffs[i] == diffs[i - 1]:
                a += 1
            else:
                cons.append(a)
                a = 1
        cons.append(a)
        
        # 第三次遍历
        res = 0
        for num in cons:
            res += int(self.calc(num))
        return res
        
    # 用于计算cons内每个数代表的等差数列个数
    def calc(self, n):
        if n == 1:
            return 0
        n += 1
        return (n-2)*(n-1)/2
