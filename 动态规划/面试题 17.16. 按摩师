# -*- coding: utf-8 -*-
'''
题目：
一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。
给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

例如：
输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/the-masseuse-lcci
'''

'''
思路：动态规划--
定义 dp[i][0] 表示考虑前i个预约，第i个预约不接的最长预约时间，dp[i][1] 表示考虑前i个预约，第i个预约接的最长预约时间。
从前往后计算dp值，假设我们已经计算出前i−1个dp值，考虑计算dp[i][0/1]的答案。
首先考虑dp[i][0]的转移方程，由于这个状态下第i个预约是不接的，所以第i−1个预约接或不接都可以，故可以从dp[i−1][0]和dp[i−1][1]两个状态转移过来，转移方程即为：
dp[i][0]=max(dp[i−1][0],dp[i−1][1])
对于 dp[i][1]，由于这个状态下第i个预约要接，根据题目要求按摩师不能接受相邻的预约，所以第i−1个预约不能接受，故我们只能从dp[i−1][0]这个状态转移过来，转移方程即为：
dp[i][1]=dp[i−1][0]+numsi
​其中numsi表示第i个预约的时长。
最后答案即为 max(dp[n][0],dp[n][1]) ，其中n表示预约的个数。
'''

class Solution:
    def massage(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return 0

        dp0, dp1 = 0, nums[0]
        for i in range(1, n):
            tdp0 = max(dp0, dp1)   # 计算 dp[i][0]
            tdp1 = dp0 + nums[i]   # 计算 dp[i][1]
            dp0, dp1 = tdp0, tdp1
        
        return max(dp0, dp1)
